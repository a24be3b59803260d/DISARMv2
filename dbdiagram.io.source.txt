// Source: https://dbdiagram.io/d/62321b9a0ac038740c4818be

// Creating tables
Table frameworks as F {
  object_id varchar [pk]
  name varchar
  description text
}

// Frameworks consist of phases
Table phases {
  object_id varchar [pk]
  sequence_number int// Phases have order
  name varchar
  description text
  framework varchar [ref: > F.object_id]
}

// Phases contain tactics
Table tactics {
  object_id varchar [pk]
  name varchar
  description text
}

// tactics may be associated with multiple phases
Table phase_tatics {
  phase_id varchar [ref: > phases.object_id]
  tactic_id varchar [ref: - tactics.object_id]
}

// Techniques are means of achieving tactics
Table techniques as tech {
  object_id varchar [pk]
  name varchar
  description text
  // TECHNIQUEs can produce and consume NARRATIVEs
  can_produce_narratives boolean
  can_consume_narratives boolean
}

// Tactics can be accomplished with one or more technqiues
Table tactic_techniques {
  tech_id varchar [ref: > tech.object_id]
  tactic_id varchar [ref: - tactics.object_id]
}

// Techniques belong to one or more Frameworks
Table belongs_to_framework {
  framework varchar [ref: > F.object_id]
  technique varchar [ref: - tech.object_id]
}

// Detections are means by which a technique may be observed
Table detections as D {
  object_id varchar [pk]
  name varchar
  description text
}

// Techniques are detected by one or more detections
Table detects_technique {
  detection_id varchar [ref: > D.object_id]
  technique_id varchar [ref: > techniques.object_id]
}

// Techniques are countered by techniques
Table counters{
  object_id varchar [pk]
  technique_id varchar [ref: - tech.object_id]
  countered_by varchar [ref: > tech.object_id]
}

//////////////////////////////////////
// TAGS
//

Table metatechniques as M {
  object_id varchar [pk]
  name varchar
  description text
}

// Metatechniques may associate one or more techniques
Table metatechnique_associations {
  metatechnique varchar [ref: - M.object_id]
  technique varchar [ref: - tech.object_id]
}

Table actortypes as A {
  object_id varchar [pk]
  name varchar
  description text
}

// ACTORTYPEs may perform one or more TECHNIQUEs
Table can_perform {
  actortype varchar [ref: - A.object_id]
  technique varchar [ref: - tech.object_id]
}

// ACTORTYPEs may be associated with one or more FRAMEWORKs
Table framework_association {
  actortype varchar [ref: - A.object_id]
  framework varchar [ref: - frameworks.object_id]
}

// DETECTIONs may be associated with one or more ACTORTYPEs
Table actor_capable_detections {
  actortype varchar [ref: - A.object_id]
  detection varchar [ref: - detections.object_id]
}

///////////////////////////////////////
// USAGE
//

Table actors {
  id int [pk]
  name varchar
  description text
}

Table campaigns as C {
  id int [pk]
  name varchar
  description text
}

// Multiple actors may be involved in multiple campaigns
Table campaign_actors {
  actor int [ref: - actors.id]
  campaign int [ref: - C.id]
}

// Detection events are the detection and supporting data
Table detection_events {
  id int [pk]
  detection varchar [ref: - detections.object_id]
  event_data text
}

Table incidents {
  id int [pk]
  name varchar
  summary text
}

// INCIDENTs may be associated with a CAMPAIGN
Table campaign_incidents {
  campaign_id int [ref: - C.id]
  incident int [ref: > incidents.id]
}

// INCIDENTs are one or more DETECTIONs with accompanying data
Table incident_detections {
  incident_id int [ref: - incidents.id]
  event int [ref: > detection_events.id]
}
// INCIDENTs include zero or more deployed TECHNIQUEs
// These can be found joining the incidents, evidence, detection

// ACTORs belong to one or more ACTORTYPEs
Table actors_to_types {
  actor_id int [ref: - actors.id]
  actor_type_id varchar [ref: > A.object_id]
}

// NARRATIVEs are one or more distinct concepts that support CAMPAIGNs
Table narratives {
  id int [pk]
  name varchar
  description text
}

Table narrative_campaign_support {
  narratives_id int [ref: - narratives.id]
  supports_campaign int [ref: - C.id]
}

Table narrative_associated_incident {
  narratives_id int [ref: - narratives.id]
  associated_incident int [ref: - incidents.id]
}

Table related_narratives {
  narrative_a int [ref: - narratives.id]
  narrative_b int [ref: - narratives.id]
  relationship varchar
}